%%[
    SET @lookup = LookUpRows('APIIntegrations','Nombre','CVs')
    SET @rowResult = Row(@lookup,1)
    SET @clientId = Base64Decode(Field(@rowResult,'Client Id'),'UTF-8')
    SET @clientSecret = Base64Decode(Field(@rowResult,'Client Secret'),'UTF-8')
    SET @tenantId = Field(@rowResult,'Tenant Id')
    SET @oldToken = Base64Decode(Field(@rowResult,'Token'),'UTF-8')
    SET @expirationDate = Field(@rowResult,'ExpirationDate')
]%%
<script runat="server">
    Platform.Load("Core","1.1.1");
        Write('Actualizado 8');
        var tenantId = Variable.GetValue("@tenantId");
        var config = {
            endpoint: "https://"+tenantId+".auth.marketingcloudapis.com/v2/token",
            localDate:  DateTime.SystemDateToLocalDate(Now())
        }
    try {
         //fetch posted data
        var jsonData = Platform.Request.GetPostData();
        var obj = Platform.Function.ParseJSON(jsonData);
        //prepare data for API call
        var base64enc = obj.base64enc;
        var fileName = obj.fileName;
        var assetName = obj.assetName;
        var result = retrievetoken();
        var headerNames = ["Authorization"];
        var headerValues = ["Bearer " + result.token];
        var assetTypeID = 127
        var jsonBody = {
            "name": fileName,
            "assetType": {
                "name": assetName,
                "id": assetTypeID
            },
            "file": base64enc
        };
        var resp = HTTP.Post(result.url, "application/json", Stringify(jsonBody), headerNames, headerValues);
        Write(resp)
    } catch (e) {
        Write(Stringify(e));
    }
    function retrievetoken(){
        var oldToken = Variable.GetValue("@oldToken");
        var expirationDate = Variable.GetValue("@expirationDate");
        if(oldToken != null && (new Date(config.localDate) < new Date(expirationDate))){
            return {
                "token":Variable.GetValue("@oldToken"),
                "url":"https://"+tenantId+".rest.marketingcloudapis.com/",
                "expires":expirationDate
            }
        }else{
            var result = requestToken();
            var upsert = storeToke(result);
            return result
        }
    }
    function requestToken(){
        var payload = {
            "grant_type": "client_credentials",
            "client_id": Variable.GetValue("@clientId"),
            "client_secret": Variable.GetValue("@clientSecret")
        }
        var request = HTTP.Post(config.endpoint,"application/json",Stringify(payload));
        if(request.StatusCode == 200){
            var result = Platform.Function.ParseJSON(request.Response[0]);
            var parsedDate = new Date(config.localDate);
            var expirationDate = new Date(parsedDate.getTime() + (result.expires_in * 1000));
            return {
                token: result.access_token,
                url: result.rest_instance_url,
                expires: expirationDate
            }
        }
    }
    function storeToke(result){
        var rows = Platform.Function.UpsertData(
            'APIIntegrations',
            ["Nombre"],["CVs"],
            ["Token","ExpirationDate"],[encrypt(result.token),result.expires]
        )
    }
    function encrypt(str) {
        Variable.SetValue("@ToEncrypt", str)
        var scr = "";
        scr += "\%\%[";
        scr += "SET @Encrypted = Base64Encode(@ToEncrypt, 'UTF-8')";
        scr += "Output(Concat(@Encrypted))";
        scr += "]\%\%";

        return Platform.Function.TreatAsContent(scr);
    }
</script>